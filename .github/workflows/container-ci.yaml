name: Container CI/CD

on:
  push:
    paths:
      - 'backend/Containers/**'
  pull_request:
    paths:
      - 'backend/Containers/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

    # Install pytest
      - name: Install pytest
        run: |
            python -m pip install --upgrade pip
            pip install pytest

      - name: Install jq
        uses: dcarbone/install-jq-action@v2.1.0
        
    # install all the requirements file in each backend/Containers
      - name: Install requirements
        run: |
            # Get the list of changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            INSTALLED_CONTAINERS=()
            
            # loop through changed files in the ./backend/Containers directory that have Container in their name
            for FILE in $CHANGED_FILES; do
            if [[ $FILE == backend/Containers/*Container* ]]; then
                CONTAINER=$(echo $FILE | cut -d'/' -f3)
                if [[ ! " ${INSTALLED_CONTAINERS[@]} " =~ " ${CONTAINER} " ]]; then
                cd backend/Containers/$CONTAINER
                pip install -r requirements.txt
                INSTALLED_CONTAINERS+=($CONTAINER)
                cd ../../..
                fi
            fi
            done

    # Test each changed container
      - name: Test each changed container
        run: |
            # Get the list of changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            TESTED_CONTAINERS=()
            
            # loop through changed files in the ./backend/Containers directory that have Container in their name
            for FILE in $CHANGED_FILES; do
            if [[ $FILE == backend/Containers/*Container* ]]; then
                CONTAINER=$(echo $FILE | cut -d'/' -f3)
                if [[ ! " ${TESTED_CONTAINERS[@]} " =~ " ${CONTAINER} " ]]; then
                cd backend/Containers/$CONTAINER
                export PYTHONPATH=$PWD
                pytest
                TESTED_CONTAINERS+=($CONTAINER)
                cd ../../..
                fi
            fi
            done
            

      - name: Login to docker hub
        run: |
            echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and push changed containers for AWS ARM architecture and apply to cluster
        run: |
            # Get the list of changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            PUSHED_CONTAINERS=()
            
            # Loop through the changed files and build/push Docker image for the corresponding container
            for FILE in $CHANGED_FILES; do
            if [[ $FILE == backend/Containers/*Container* ]]; then
                    CONTAINER=$(echo $FILE | cut -d'/' -f3)
                    if [[ ! " ${PUSHED_CONTAINERS[@]} " =~ " ${CONTAINER} " ]]; then
                        cd backend/Containers/$CONTAINER

                        container_name=$(echo $CONTAINER | sed 's/Container//g' | tr '[:upper:]' '[:lower:]')

                        echo $container_name

                        echo "getting latest tag"

                        LATEST_TAG=$(curl -s https://registry.hub.docker.com/v2/repositories/tennisdockerimages/$container_name/tags | jq -r '.results[].name' | grep -oE '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
                        
                        echo "latest tag is $LATEST_TAG"

                        NEW_TAG=echo $LATEST_TAG | awk -F. -v OFS=. '{$NF = $NF + 1; print}'
                        
                        echo "new tag is $NEW_TAG"

                        docker buildx build --platform linux/arm64 -t tennisdockerimages/$container_name:$NEW_TAG --push .
                    fi
                fi
            done
            