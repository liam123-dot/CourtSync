name: Container CI/CD

on:
  push:
    paths:
      - 'backend/Containers/**'
  pull_request:
    paths:
      - 'backend/Containers/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Install pytest
      - name: Install pytest
        run: |
            python -m pip install --upgrade pip
            pip install pytest

      - name: Install jq
        uses: dcarbone/install-jq-action@v2.1.0
        
      # Install requirements for each container
      - name: Install requirements
        run: |
          # Get the list of containers
          CONTAINERS=$(ls backend/Containers)

          # Loop through each container and install requirements
          for CONTAINER in $CONTAINERS; do
            if [[ "$CONTAINER" == *"Container"* ]]; then
              cd backend/Containers/$CONTAINER
              pip install -r requirements.txt
              cd ../../..
            fi
          done

      - name: Test containers shared directory
        run: |
            cd backend/Containers/shared
            export PYTHONPATH=$PWD
            pip3 install -r requirements.txt
            pytest
            cd ../../..
    
      - name: Login to docker hub
        run: |
            echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # Test and build each container
      - name: Test and build each container
        run: |
            # Get the list of containers
            CONTAINERS=$(ls backend/Containers)

            # Loop through each container, test, and build
            for CONTAINER in $CONTAINERS; do
                cd backend/Containers/$CONTAINER 
                export PYTHONPATH=$PWD
                pytest

                container_name=$(echo $CONTAINER | sed 's/Container//g' | tr '[:upper:]' '[:lower:]')

                echo $container_name

                echo "getting latest tag"

                LATEST_TAG=$(curl -s https://registry.hub.docker.com/v2/repositories/tennisdockerimages/$container_name/tags | jq -r '.results[].name' | grep -oE '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
                
                echo "latest tag is $LATEST_TAG"

                NEW_TAG=$(echo $LATEST_TAG | awk -F. -v OFS=. '{$NF = $NF + 1; print}')
                
                echo "new tag is $NEW_TAG"

                docker buildx build --platform linux/arm64 -t tennisdockerimages/$container_name:$NEW_TAG --push .
                cd ../../..
            done

    